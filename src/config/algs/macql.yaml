# --- QMIX specific parameters ---

# use epsilon greedy action selector
action_selector: "epsilon_greedy"
epsilon_start: 1.0
epsilon_finish: 0.05
epsilon_anneal_time: 100000 # 500000 for 6h_vs_8z else 100000

# runner: "episode"
runner: "parallel"
batch_size_run: 8 # batch_size_run=4, buffer_size = 2500, batch_size=64  for 3s5z_vs_3s6z
t_max: 10050000

buffer_size: 5000 
batch_size: 128
optimizer: 'adam'


# update the target network every {} episodes
target_update_interval: 200

# use the Q_Learner to train
agent_output_type: q

learner: "cq_learner"
mixer: "qmix"
mixing_embed_dim: 32
hypernet_embed: 64
lr: 0.001 # Learning rate for agents
td_lambda: 0.6 # 0.3 for 6h_vs_8z else 0.6
q_lambda: False

# rnn layer normalization
use_layer_norm: False

# orthogonal init for DNN
use_orthogonal: False
gain: 0.01

# Priority experience replay
use_per: False
per_alpha: 0.6
per_beta: 0.4
return_priority: False

use_sarsa: False
cql_alpha: 5.0
global_cql_alpha: 50.0
# counterfactual: 1
raw_cql: False
sparse_lambda: False
softmax_temp: 5
training_episodes: 5000
raw_sample_actions: 100
# behaviour_checkpoint_path: "" #"/home/quy/mypymarl2/offline_datasets/6h_vs_8z_expert_bcmodel" 

cal_dcql: False
# collect_data: False
# checkpoint_path: "" #"/home/qy/mypymarl2/results/models/qmix_env=8_adam_td_lambda__5m_vs_6m__parallel__2022-10-11_19-27-20" # Load a checkpoint from this path
# collect_nepisode: 10000
# h5file_suffix: 'expert'
# load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)

name: "macql"